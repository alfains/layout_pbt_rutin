# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayoutPBT
                                 A QGIS plugin
 Layout PBT Rutin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-13
        git sha              : $Format:%H$
        copyright            : (C) 2024 by alfains
        email                : @alfains
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import Qt, QSettings, QTranslator, QCoreApplication, QPointF, QRectF, QSize
from qgis.PyQt.QtGui import QIcon, QPolygonF, QColor, QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import (QgsReadWriteContext, QgsGeometry, QgsMapSettings, QgsPrintLayout, QgsMapSettings, QgsMapRendererParallelJob, QgsLayoutItemLabel, QgsLayoutItemLegend, QgsLayoutItemMap,
                    QgsLayoutItemPolygon, QgsLayoutItemScaleBar, QgsLayoutExporter, QgsLayoutItem, QgsLayoutPoint, QgsLayoutSize, QgsUnitTypes, QgsProject, QgsFillSymbol, QgsAbstractValidityCheck,
                    check)
from qgis.PyQt.QtXml import QDomDocument
from qgis.core import QgsRectangle, QgsPointXY, QgsVectorLayerSimpleLabeling, QgsTextBufferSettings, QgsTextFormat, QgsPalLayerSettings, QgsFeatureRequest, QgsVectorFileWriter, QgsExpression, QgsField, QgsFields, QgsFeature, QgsCategorizedSymbolRenderer, QgsRendererCategory, QgsMarkerSymbol, QgsSymbol, QgsStyle, QgsRuleBasedRenderer
#from qgis.gui import QgsLayoutDesignerInterface


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .layout_pbt_dialog import LayoutPBTDialog
import os.path
import os
import re


class LayoutPBT:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'LayoutPBT_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Layout PBT Rutin')
        #self.list_wilayah = {
        #    "Nusa Tenggara Barat": {"Kota Mataram": {"Ampenan": ["Ampenan Selatan"], "Mataram": ["Mataram Barat"]}, 
        #                            "Lombok Barat": {"Contoh": ["Desa A", "Desa B"]}},
        #}

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.counter = 1
        #self.nib_digit_five = "01871"
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('LayoutPBT', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/layout_pbt/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Layout PBT Rutin'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Layout PBT Rutin'),
                action)
            self.iface.removeToolBarIcon(action)

    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = LayoutPBTDialog()
            self.dlg.comboBox.addItem("Nusa Tenggara Barat")

            #clicked dropdown 1
            
            self.dlg.comboBox.activated.connect(self.clicker)
            self.dlg.comboBox_2.activated.connect(self.clicker2)
            self.dlg.comboBox_3.activated.connect(self.clicker3)

            self.dlg.pushButton_5.clicked.connect(self.open_layout)
            self.dlg.pushButton.clicked.connect(self.create_layout)
            self.dlg.pushButton.clicked.connect(self.edit_label)
            self.dlg.pushButton.clicked.connect(self.symbology)
            self.dlg.pushButton.clicked.connect(self.close)
            self.dlg.pushButton_2.clicked.connect(self.close)
            self.dlg.pushButton_3.clicked.connect(self.open_unduh_persil)
            self.dlg.pushButton_4.clicked.connect(self.open_raster)
            
            

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.counter += 1
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    def clicker(self):
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItem("Mataram")
    
    def clicker2(self):
        self.dlg.comboBox_3.clear()
        self.dlg.comboBox_3.addItem("Ampenan",["Ampenan Selatan","Ampenan Tengah","Ampenan Utara","Banjar","Bintaro","Dayen Peken","Kebun Sari"])
        self.dlg.comboBox_3.addItem("Cakranegara",["Cakranegara Barat","Cakranegara Selatan","Cakranegara Selatan Baru","Cakranegara Timur","Cakranegara Utara","Cilinaya","Karang Taliwang"])
        self.dlg.comboBox_3.addItem("Mataram",["Mataram Timur","Pagesangan","Pagesangan Barat","Pagesangan Timur","Pagutan","Pagutan Barat","Pagutan Timur"])
        self.dlg.comboBox_3.addItem("Sandubaya",["Abian Tubuh Baru","Babaka","Bertais","Dasan Cermen","Mandalika","Selagalas","Turida"])
        self.dlg.comboBox_3.addItem("Sekarbela",["Jempong Baru","Karang Pule","Kekalik Jaya","Tanjung Karang","Tanjung Karang Permai"])
        self.dlg.comboBox_3.addItem("Selaparang",["Dasan Agung","Dasan Agung Baru","Gomong","Karang Baru","Mataram Barat","Monjok","Monjok Barat"])


    def clicker3(self,index):
        self.dlg.comboBox_4.clear()
        self.dlg.comboBox_4.addItems(self.dlg.comboBox_3.itemData(index))

    def close(self):
        self.dlg.close()

    def open_layout(self):
        url_layout, _filter=QFileDialog.getOpenFileName(self.dlg, "Open File", "", "")
        self.dlg.lineEdit_18.setText(url_layout)
    
    def open_unduh_persil(self):
        url_unduh_persil, _filter=QFileDialog.getOpenFileName(self.dlg, "Open File", "", "*.shp")
        self.dlg.lineEdit_16.setText(url_unduh_persil)
    
    def open_raster(self):
        url_raster, _filter=QFileDialog.getOpenFileName(self.dlg, "Open File", "", "*.ecw")
        self.dlg.lineEdit_17.setText(url_raster)
        
    def create_layout(self):
         project = QgsProject.instance()
         layout = QgsPrintLayout(project)
         layout.initializeDefaults()
         layoutPath = os.path.join(self.plugin_dir, 'layout_pbt_t3.qpt') 
         with open(layoutPath) as f:
            template_content = f.read()
         doc = QDomDocument()
         doc.setContent(template_content)
         layout.loadFromTemplate(doc, QgsReadWriteContext(), False)
         layout.setName(self.dlg.lineEdit_11.text())
         project.layoutManager().addLayout(layout)
         layer_raster=self.dlg.lineEdit_17.text()
         self.iface.addRasterLayer(layer_raster, "Citra","gdal")
         layer_shp=self.dlg.lineEdit_16.text()
         self.iface.addVectorLayer(layer_shp, f'Persil Unduh {self.counter}',"ogr")
         
    def edit_label(self):
        select_layout = QgsProject.instance().layoutManager().layoutByName(self.dlg.lineEdit_11.text())
        edit_no_pbt=select_layout.itemById('no_pbt')
        edit_no_pbt.setText(self.dlg.lineEdit.text())
        edit_jln=select_layout.itemById('jln')
        edit_jln.setText(self.dlg.lineEdit_2.text())
        edit_kel=select_layout.itemById('kel')
        edit_kel.setText(self.dlg.comboBox_4.currentText())
        edit_kec=select_layout.itemById('kec')
        edit_kec.setText(self.dlg.comboBox_3.currentText())
        edit_kota=select_layout.itemById('kota')
        edit_kota.setText(self.dlg.comboBox_2.currentText())
        edit_prov=select_layout.itemById('prov')
        edit_prov.setText(self.dlg.comboBox.currentText())
        edit_no_brks=select_layout.itemById('no_brks')
        edit_no_brks.setText(self.dlg.lineEdit_7.text())
        edit_no_gu=select_layout.itemById('no_gu')
        edit_no_gu.setText(self.dlg.lineEdit_8.text())
        edit_nib=select_layout.itemById('nib')
        self.nib_input=self.dlg.lineEdit_9.text()
        self.nib_digit_five = self.nib_input[-5:]
        edit_nib.setText(self.nib_input)
        edit_luas=select_layout.itemById('luas')
        edit_luas.setText(self.dlg.lineEdit_10.text())
        edit_ptgs_ukr=select_layout.itemById('ptgs_ukr')
        edit_ptgs_ukr.setText(self.dlg.plainTextEdit.toPlainText())
        #edit_ptgs_ukr2=select_layout.itemById('ptgs_ukr2')
        #edit_ptgs_ukr2.setText(self.dlg.lineEdit_13.text())
        edit_nip_ptgs_ukr=select_layout.itemById('nip_ptgs_ukr')
        edit_nip_ptgs_ukr.setText(self.dlg.plainTextEdit_2.toPlainText())
        #edit_nip_ptgs_ukr2=select_layout.itemById('nip_ptgs_ukr2')
        #edit_nip_ptgs_ukr2.setText(self.dlg.lineEdit_15.text())
        edit_nib_legenda=select_layout.itemById('nib_legenda')
        #sub=edit_nib[12:5]
        edit_nib_legenda.setText(self.nib_digit_five)
        #nib_legenda2=self.dlg.lineEdit_9.text()
        #nib_legenda2_substring=nib_legenda2[12:5]
        #edit_nib_legenda.setText(nib_legenda2_substring)

    def symbology(self):         
         #layer_symbol=self.iface.activeLayer()
         shp_name=f'Persil Unduh {self.counter}'
         layer_symbol= QgsProject.instance().mapLayersByName( shp_name )[0]
         
         rules = (("Selain {}".format(self.nib_digit_five), 'NIB IS NOT \'{}\''.format(self.nib_digit_five), 'black', None),("{}".format(self.nib_digit_five), 'NIB=\'{}\''.format(self.nib_digit_five), 'black', None))
        # create a new rule-based renderer
         symbol = QgsSymbol.defaultSymbol(layer_symbol.geometryType())
         
         renderer = QgsRuleBasedRenderer(symbol)
         # get the "root" rule
         
         root_rule = renderer.rootRule()

         for label, expression, color_name, scale in rules:
             # create a clone (i.e. a copy) of the default rule
             rule = root_rule.children()[0].clone()
             # set the label, expression and color
             rule.setLabel(label)
             rule.setFilterExpression(expression)
             #rule.symbol().setColor(QColor(color_name))
             rule.symbol().symbolLayer(0).setBrushStyle(Qt.BrushStyle(Qt.NoBrush))
             rule.symbol().symbolLayer(0).setStrokeColor(QColor(color_name))
             rule.symbol().symbolLayer(0).setStrokeWidth(0.5)
             # set the scale limits if they have been specified
             if scale is not None:
                rule.setMinimumScale(scale[0])
                rule.setMaximumScale(scale[1])
                # append the rule to the list of rules
             root_rule.appendChild(rule)
         root_rule.removeChildAt(0)         
         layer_symbol.setRenderer(renderer)
         layer_symbol.triggerRepaint()
        
        #eport ke shp
         folder = "E:/_Plugin/_shp"
         feature= '{}'.format(self.nib_digit_five)
         field_name = "NIB"
         file_path = f"{folder}/{feature}.shp"
         layer_symbol.selectByExpression(f"{field_name}={feature}") 
         QgsVectorFileWriter.writeAsVectorFormat(layer_symbol,file_path,'utf-8',layer_symbol.crs(),"ESRI Shapefile",onlySelected=True)
         self.iface.addVectorLayer(file_path, "","ogr")

         #COLOR SYMBOL
         shp_name='{}'.format(self.nib_digit_five)
         layer_color_symbol= QgsProject.instance().mapLayersByName( shp_name )[0]
         single_symbol_renderer = layer_color_symbol.renderer()
         symbol_color = single_symbol_renderer.symbol()
         symbol_color.symbolLayer(0).setBrushStyle(Qt.BrushStyle(Qt.NoBrush))
         symbol_color.symbolLayer(0).setStrokeColor(QColor('black'))
         symbol_color.symbolLayer(0).setStrokeWidth(1.25)
         layer_color_symbol.triggerRepaint()

         #labels
         layer_settings  = QgsPalLayerSettings()
         text_format = QgsTextFormat()
         text_format.setFont(QFont("Arial", 12))
         text_format.setSize(12)
         buffer_settings = QgsTextBufferSettings()
         buffer_settings.setEnabled(True)
         buffer_settings.setSize(1)
         buffer_settings.setColor(QColor("white"))
         text_format.setBuffer(buffer_settings)
         layer_settings.setFormat(text_format)
         layer_settings.fieldName = "NIB"
         layer_settings.placement = QgsPalLayerSettings.OverPoint
         layer_settings.enabled = True
         layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
         layer_symbol.setLabelsEnabled(True)
         layer_symbol.setLabeling(layer_settings)
         layer_symbol.triggerRepaint()

        
         #extent and scale layout based on layer using atlas
         #shp_name2='01871'
         #layer_to_extent= QgsProject.instance().mapLayersByName( shp_name2 )[0]
         #select_layout2 = QgsProject.instance().layoutManager().layoutByName(self.dlg.lineEdit_11.text())
         #atlas = select_layout2.atlas()
        #atlas.setCoverageLayer(layer_symbol)
         #atlas.setFilterFeatures(True)
         #atlas.setFilterExpression(''' "NIB" = '01871' ''')
         #atlas.setEnabled(True)
         #atlas.beginRender() 
         # For 0 to Number of features in Atlas Selection
         #for i in range(0, atlas.count()):
             # Creata a exporter Layout for each layout generate with Atlas
             #exporter = QgsLayoutExporter(atlas.layout())
             #print('Saving File: '+str(atlas.currentFeatureNumber())+' of '+str(atlas.count()))
             # If you want create a PDF's Files
             #exporter.exportToPdf('E:/_Plugin/'+atlas.currentFilename()+".pdf", QgsLayoutExporter.PdfExportSettings())
             # If you want create a JPG's files
             # exporter.exportToImage('c:/temp/'+myAtlas.currentFilename()+".jpg", QgsLayoutExporter.ImageExportSettings())
             # Show wich file is creating
             #print('Create File: '+atlas.currentFilename())
             # Create Next Layout
             # myAtlas.next()
             # # Close Atlas Creation
         #atlas.endRender()
        #preview = QgsLayoutDesignerInterface()
         #if atlas.coverageLayer() is not None:
            #preview.setAtlasPreviewEnabled(True)
         #preview = QgsLayoutDesignerInterface()
         #preview.setAtlasPreviewEnabled(True)  
      
    
        
        #extent and scale layout based on layer using scale 250, 500, 1000
         #shp_name2='01871'
         #layer_to_extent= QgsProject.instance().mapLayersByName( shp_name2 )[0]
         #select_layout2 = QgsProject.instance().layoutManager().layoutByName(self.dlg.lineEdit_11.text())
         #map = select_layout2.itemById('map_layout')
         #layer_extent = layer_to_extent.extent()
         
         #x_layer_min = layer_extent.xMinimum()
         #x_layer_max = layer_extent.xMaximum()
         #y_layer_min = layer_extent.yMinimum()
         #y_layer_max = layer_extent.yMaximum()

         #x_layer = x_layer_max-x_layer_min
         #y_layer = y_layer_max-y_layer_min

         #x_layout = 54
         #y_layout = 49

         #skala = 1
         #if x_layer < x_layout:
             #skala = 1
         #elif x_layer < (x_layout*2):
           #  skala = 2
         #else :
          #   skala = 4

         

        # x_map = ((x_layout*skala)-x_layer)/2
         #y_map = ((y_layout*skala)-y_layer)/2

         #x_map_min = x_layer_min-x_map
         #x_map_max = x_layer_max+x_map
         #y_map_min = y_layer_min-y_map
         #y_map_max = y_layer_max+y_map


         #layout_map_rect = QgsRectangle(x_map_min, y_map_min, x_map_max, y_map_max)
         #layout_map_rect.setXMaximum = x_map_max
         #layout_map_rect.setXMinimum = x_map_min
         #layout_map_rect.setYMaximum = y_map_max
         #layout_map_rect.setYMinimum = y_map_min
         #map.setExtent(layout_map_rect)

         #map_scale = 250
         #if x_layer < x_layout:
         #   map_scale = 250
         #elif x_layer < (x_layout*2):
          #   map_scale = 500
         #else :
         #    map_scale = 1000
         #map.setScale(map_scale)

         #extent and scale layout based on layer using flexible scale
         layer_to_extent= QgsProject.instance().mapLayersByName( shp_name )[0]
         select_layout2 = QgsProject.instance().layoutManager().layoutByName(self.dlg.lineEdit_11.text())
         map = select_layout2.itemById('map_layout')
         scale_bar = select_layout2.itemById('scale_bar')
         layer_extent = layer_to_extent.extent()
         
         x_layer_min = layer_extent.xMinimum()
         x_layer_max = layer_extent.xMaximum()
         y_layer_min = layer_extent.yMinimum()
         y_layer_max = layer_extent.yMaximum()

         x_layer = x_layer_max-x_layer_min
         y_layer = y_layer_max-y_layer_min

         x_layout = 35
         y_layout = 32

         margin = 5

         if x_layer > y_layer :
             ratio = x_layer/x_layout
         else :
             ratio = y_layer/y_layout

         
         if x_layer < x_layout:
             x_map = (x_layout-x_layer)/2
             y_map = (y_layout-y_layer)/2
             map_scale = 250 * ratio

         else :
             x_map = (x_layout-x_layer)/2
             y_map = (y_layout-y_layer)/2
             map_scale = 250 * ratio

         x_map_min = x_layer_min-x_map
         x_map_max = x_layer_max+x_map
         y_map_min = y_layer_min-y_map
         y_map_max = y_layer_max+y_map


         layout_map_rect = QgsRectangle(x_map_min, y_map_min, x_map_max, y_map_max)
         layout_map_rect.setXMaximum = x_map_max
         layout_map_rect.setXMinimum = x_map_min
         layout_map_rect.setYMaximum = y_map_max
         layout_map_rect.setYMinimum = y_map_min
         map.setExtent(layout_map_rect)

         map.setScale(map_scale)
         if map.scale() < 100 :
             map_scale = 100
        
         map.setScale(map_scale)
         #label unit multiplier
         #scale_bar.setMapUnitsPerScaleBarUnit(3)
         #fixed width segmen
         if map.scale() < 161:
             w_scale_bar = 1
         elif map.scale() < 251:
             w_scale_bar = 2
         elif map.scale() < 501:
             w_scale_bar = 3
         elif map.scale() < 751:
             w_scale_bar = 5
         else :
             w_scale_bar = 7

         scale_bar.setUnitsPerSegment(w_scale_bar)
    

    
         #map.setExtent(layer_extent)
        #map.setScale(500)
        #map.setCenter(114.825,105.005)

        #x=
        #y=
        #map_pos = QgsPointXY(x, y)
        #rect = QgsRectangle(layer_extent)
        #map.setExtent(rect)
        #map.setScale(500)
        